#define TINY_GSM_MODEM_SIM7600
#define SerialAT Serial1

#include <OneWire.h>
#include <DallasTemperature.h>
#include <TinyGsmClient.h>
#include <HttpClient.h>
#include <TinyGsmClientSIM7600.h>

// Paramètres de l'APN (Point d'accès du réseau mobile)
const char apn[] = "fnetnrj";
const char gprsUser[] = "";
const char gprsPass[] = "";

// Paramètres du serveur ThingSpeak
const char* server = "api.thingspeak.com";
const int port = 80;
const char* path = "/update";
const char* apiKey = "IOXGGCZHHEV3DFMZ";

// Capteur de température Dallas (DS18B20)
#define ONE_WIRE_BUS 27
OneWire oneWire(ONE_WIRE_BUS);
DallasTemperature sensors(&oneWire);

TinyGsmSim7600 modem(SerialAT);
TinyGsmClient gsmClient(modem);
HttpClient http(gsmClient, server, port);

void setup() {
  Serial.begin(115200);
  delay(1000);

  Serial.println("Initializing modem...");
  modem.init();
  modem.gprsConnect(apn, gprsUser, gprsPass);
  Serial.println("Modem initialized");
  sensors.begin();
}

void loop() {
  // Lire la température du capteur Dallas
  sensors.requestTemperatures();
  float temperature = sensors.getTempCByIndex(0);

  // Envoyer les données à ThingSpeak
  sendToThingSpeak(temperature);

  delay(5000); // Intervalle entre les envois de données
}

void sendToThingSpeak(float temperature) {
  // Construire le corps de la requête
  String body = "api_key=" + String(apiKey) + "&field1=" + String(temperature);

  // Configurer la requête HTTP
  http.beginRequest();
  http.post(path);
  http.sendHeader("Content-Type", "application/x-www-form-urlencoded");
  http.sendHeader("Content-Length", String(body.length()));
  http.beginBody();
  http.print(body);
  http.endRequest();

  // Lire la réponse du serveur
  int statusCode = http.responseStatusCode();
  String response = http.responseBody();

  Serial.print("HTTP Status Code: ");
  Serial.println(statusCode);
  Serial.print("Response: ");
  Serial.println(response);
}
